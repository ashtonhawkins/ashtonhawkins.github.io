---
interface Snapshot {
  stat: string;
  lever: string;
  timeframe: string;
  methodology?: string;
}

const { snapshots } = Astro.props as { snapshots: Snapshot[] };
---

<section class="flex flex-col gap-6">
  <div class="flex items-center justify-between">
    <h2 class="text-lg font-semibold text-text-primary">Impact snapshots</h2>
  </div>
  <div class="grid grid-cols-1 gap-4 md:grid-cols-3">
    {snapshots.map((snapshot, index) => (
      <div class="flex flex-col gap-3 rounded-2xl border border-border/60 bg-background/70 p-6 shadow-soft transition-transform duration-100 ease-out hover:-translate-y-1 hover:shadow-ring focus-within:-translate-y-1 focus-within:shadow-ring" data-methodology-card>
        <div class="flex items-start justify-between gap-3">
          <div class="flex flex-col gap-1">
            <p class="text-sm font-semibold uppercase tracking-[0.25em] text-text-muted">{snapshot.timeframe}</p>
            <p class="text-3xl font-semibold text-text-primary">{snapshot.stat}</p>
          </div>
          {snapshot.methodology && (
            <button
              type="button"
              class="flex h-8 w-8 items-center justify-center rounded-full border border-border text-xs font-semibold text-text-secondary transition hover:border-accent hover:text-text-primary focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-accent"
              data-methodology-trigger
              aria-expanded="false"
              aria-controls={`snapshot-methodology-${index}`}
            >
              i
            </button>
          )}
        </div>
        <p class="text-base text-text-secondary">{snapshot.lever}</p>
        {snapshot.methodology && (
          <p id={`snapshot-methodology-${index}`} class="hidden text-sm text-text-muted" data-methodology-copy>{snapshot.methodology}</p>
        )}
      </div>
    ))}
  </div>
</section>

<script type="module">
const bindToggles = () => {
  document.querySelectorAll('[data-methodology-trigger]').forEach((trigger) => {
    if (trigger.dataset.bound === 'true') return;
    trigger.dataset.bound = 'true';
    trigger.addEventListener('click', () => {
      const expanded = trigger.getAttribute('aria-expanded') === 'true';
      const targetId = trigger.getAttribute('aria-controls');
      const target = targetId ? document.getElementById(targetId) : null;
      trigger.setAttribute('aria-expanded', expanded ? 'false' : 'true');
      if (target) {
        target.classList.toggle('hidden', expanded);
      }
    });
  });
};

bindToggles();
document.addEventListener('astro:page-load', bindToggles);
</script>
