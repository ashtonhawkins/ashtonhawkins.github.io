---
import AppShell from "../layouts/AppShell.astro";
import SEO from "../components/SEO.astro";
import Hero from "../components/resume/Hero.astro";
import Snapshots from "../components/resume/Snapshots.astro";
import ExperienceTimeline from "../components/resume/ExperienceTimeline.astro";
import CaseStudyGrid from "../components/resume/CaseStudyGrid.astro";
import KeywordChips from "../components/resume/KeywordChips.astro";
import StickyContact from "../components/resume/StickyContact.astro";
import ConfidentialToggle from "../components/resume/ConfidentialToggle.astro";
import resume from "../data/resume.json";
import { formatPreciseRange, formatApproxRange } from "../utils/confidential";
import { parseTags } from "../utils/filters";
import printStyles from "../styles/print.css?url";

const searchParams = Astro.url.searchParams;
const modeParam = searchParams.get("mode");
const isConfidential = modeParam ? modeParam !== "public" : true;
const activeTags = parseTags(searchParams.get("tags"));

const caseStudyMap = new Map(resume.caseStudies.map((item) => [item.id, item]));

const experiences = resume.experience.map((item) => ({
  ...item,
  rangePublic: formatPreciseRange(item.start, item.end),
  rangeConfidential: formatApproxRange(item.start, item.end),
  caseStudies: item.caseStudyIds
    .map((id) => caseStudyMap.get(id))
    .filter(Boolean)
    .map((caseStudy) => ({ id: caseStudy!.id, title: caseStudy!.title, url: caseStudy!.url }))
}));

const email = "hello@ashtonhawkins.com";
const title = "Ashton Hawkins · Resume";
const description = resume.hero.subhead;
const canonicalUrl = Astro.site ? new URL(Astro.url.pathname, Astro.site).toString() : Astro.url.href;
const initialTagsLiteral = JSON.stringify(activeTags);
---

<AppShell>
  <SEO slot="head" title={title} description={description} ogTitle={title} canonical={canonicalUrl} />
  <link rel="stylesheet" href={printStyles} media="print" />
  <style is:inline>
    [data-confidential-root][data-confidential-state="confidential"] .public-only {
      display: none;
    }
    [data-confidential-root][data-confidential-state="public"] .confidential-only {
      display: none;
    }
    [data-toast] {
      opacity: 0;
      transform: translateY(8px);
      transition: opacity 180ms ease, transform 180ms ease;
    }
    [data-toast][data-state="visible"] {
      opacity: 1;
      transform: translateY(0);
    }
  </style>
  <article
    class="grid gap-12 lg:grid-cols-[minmax(0,1fr)_320px]"
    data-confidential-root
    data-confidential-state={isConfidential ? "confidential" : "public"}
  >
    <div class="flex flex-col gap-16">
      <Hero hero={resume.hero} email={email} />
      <ConfidentialToggle isConfidential={isConfidential} />
      <Snapshots snapshots={resume.snapshots} />
      <ExperienceTimeline experiences={experiences} />
      <CaseStudyGrid caseStudies={resume.caseStudies} />
      <section id="exports" class="flex flex-col gap-4">
        <h2 class="text-lg font-semibold text-text-primary">Exports</h2>
        <div class="flex flex-wrap gap-3">
          <button
            type="button"
            class="rounded-full border border-border px-5 py-2 text-sm font-medium text-text-secondary transition hover:border-accent hover:text-text-primary focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-accent"
            data-download-json
          >
            Download JSON
          </button>
          <button
            type="button"
            class="rounded-full border border-border px-5 py-2 text-sm font-medium text-text-secondary transition hover:border-accent hover:text-text-primary focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-accent"
            data-download-text
          >
            Download .txt
          </button>
        </div>
      </section>
      <KeywordChips keywords={resume.keywords} activeTags={activeTags} />
    </div>
    <StickyContact email={email} bio={resume.bioShort} />
  </article>
  <div aria-live="polite" data-toast class="pointer-events-none fixed bottom-24 right-6 z-50 rounded-full bg-text-primary px-4 py-2 text-sm font-medium text-background shadow-soft"></div>
  <script id="resume-payload" type="application/json" is:inline>{JSON.stringify(resume)}</script>
  <script type="module">
import { parseTags, serializeTags } from '../utils/filters.ts';

const initialTags = {initialTagsLiteral};
let activeTags = new Set(initialTags);
let printBound = false;

const applyFilters = () => {
  const tags = Array.from(activeTags);
  document.querySelectorAll('[data-keyword-chip]').forEach((chip) => {
    const tag = chip.getAttribute('data-tag');
    const isActive = tag ? tags.includes(tag) : false;
    chip.setAttribute('data-active', isActive ? 'true' : 'false');
    chip.setAttribute('aria-pressed', isActive ? 'true' : 'false');
  });
  document.querySelectorAll('[data-experience-item]').forEach((item) => {
    const tagAttr = item.getAttribute('data-tags') ?? '';
    const tagList = tagAttr
      .split(',')
      .map((tag) => tag.trim().toLowerCase())
      .filter(Boolean);
    const visible = tags.length === 0 || tagList.some((tag) => tags.includes(tag));
    if (!visible) {
      item.setAttribute('hidden', 'true');
    } else {
      item.removeAttribute('hidden');
    }
    const details = item.querySelector('[data-experience-card]');
    if (details) {
      details.setAttribute('aria-hidden', visible ? 'false' : 'true');
      if (!visible) {
        details.setAttribute('hidden', 'true');
        details.removeAttribute('open');
      } else {
        details.removeAttribute('hidden');
      }
    }
  });
  document.querySelectorAll('[data-case-study-card]').forEach((card) => {
    const tagAttr = card.getAttribute('data-tags') ?? '';
    const tagList = tagAttr
      .split(',')
      .map((tag) => tag.trim().toLowerCase())
      .filter(Boolean);
    const visible = tags.length === 0 || tagList.some((tag) => tags.includes(tag));
    card.setAttribute('aria-hidden', visible ? 'false' : 'true');
    if (!visible) {
      card.setAttribute('hidden', 'true');
    } else {
      card.removeAttribute('hidden');
    }
  });
};

const updateUrl = () => {
  const url = new URL(window.location.href);
  if (activeTags.size > 0) {
    url.searchParams.set('tags', serializeTags(Array.from(activeTags)));
  } else {
    url.searchParams.delete('tags');
  }
  history.replaceState(history.state, '', url.toString());
};

const bindKeywordChips = () => {
  document.querySelectorAll('[data-keyword-chip]').forEach((chip) => {
    if (chip.dataset.bound === 'true') return;
    chip.dataset.bound = 'true';
    chip.addEventListener('click', () => {
      const tag = chip.getAttribute('data-tag');
      if (!tag) return;
      if (activeTags.has(tag)) {
        activeTags.delete(tag);
      } else {
        activeTags.add(tag);
      }
      applyFilters();
      updateUrl();
    });
  });
};

const resumePayloadElement = document.getElementById('resume-payload');
const getResumePayload = () => {
  try {
    return resumePayloadElement ? JSON.parse(resumePayloadElement.textContent ?? '{}') : {};
  } catch (error) {
    return {};
  }
};

const downloadFile = (filename, content, mime) => {
  const blob = new Blob([content], { type: mime });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  window.setTimeout(() => {
    URL.revokeObjectURL(link.href);
    document.body.removeChild(link);
  }, 200);
};

const buildTextResume = (data) => {
  let text = `${data.hero.headline}\n${data.hero.subhead}\n\n`;
  if (Array.isArray(data.hero.stats)) {
    text += 'Scoreboard:\n';
    data.hero.stats.forEach((stat) => {
      text += `- ${stat.label}: ${stat.value}\n`;
    });
    text += '\n';
  }
  if (Array.isArray(data.snapshots)) {
    text += 'Impact Snapshots:\n';
    data.snapshots.forEach((snapshot) => {
      text += `- ${snapshot.stat} · ${snapshot.lever} (${snapshot.timeframe})\n`;
    });
    text += '\n';
  }
  if (Array.isArray(data.experience)) {
    data.experience.forEach((experience) => {
      text += `${experience.role_public} at ${experience.org_public}\n`;
      text += `  Scope: ${experience.scope.team}; ${experience.scope.budget}; ${experience.scope.surfaces}\n`;
      experience.impacts.forEach((impact) => {
        text += `  - ${impact}\n`;
      });
      text += '\n';
    });
  }
  if (Array.isArray(data.caseStudies)) {
    text += 'Case Studies:\n';
    data.caseStudies.forEach((caseStudy) => {
      text += `- ${caseStudy.title}: Problem ${caseStudy.problem} | Approach ${caseStudy.approach} | Outcome ${caseStudy.outcome}\n`;
    });
    text += '\n';
  }
  if (Array.isArray(data.keywords)) {
    text += `Keywords: ${data.keywords.join(', ')}\n`;
  }
  text += `Bio: ${data.bioShort}\n`;
  return text;
};

const bindDownloads = () => {
  const data = getResumePayload();
  document.querySelectorAll('[data-download-json]').forEach((button) => {
    if (button.dataset.bound === 'true') return;
    button.dataset.bound = 'true';
    button.addEventListener('click', () => {
      downloadFile('ashton-hawkins-resume.json', JSON.stringify(data, null, 2), 'application/json');
    });
  });
  document.querySelectorAll('[data-download-text]').forEach((button) => {
    if (button.dataset.bound === 'true') return;
    button.dataset.bound = 'true';
    button.addEventListener('click', () => {
      downloadFile('ashton-hawkins-resume.txt', buildTextResume(data), 'text/plain');
    });
  });
};

const bindPrintExpansion = () => {
  if (printBound) return;
  let previousState = new Map();
  window.addEventListener('beforeprint', () => {
    previousState = new Map();
    document.querySelectorAll('[data-experience-card]').forEach((detail) => {
      previousState.set(detail, detail.hasAttribute('open'));
      detail.setAttribute('open', 'true');
    });
  });
  window.addEventListener('afterprint', () => {
    previousState.forEach((wasOpen, detail) => {
      if (!wasOpen) {
        detail.removeAttribute('open');
      }
    });
  });
  printBound = true;
};

const initialize = () => {
  bindKeywordChips();
  bindDownloads();
  bindPrintExpansion();
  applyFilters();
};

initialize();

document.addEventListener('astro:page-load', () => {
  const url = new URL(window.location.href);
  activeTags = new Set(parseTags(url.searchParams.get('tags')));
  bindKeywordChips();
  bindDownloads();
  applyFilters();
});
  </script>
</AppShell>
